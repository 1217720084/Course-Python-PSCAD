!=======================================================================
! Generated by  : PSCAD v4.6.2.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

!     SUBR    MedidaDyn     ! 
!     SUBR    Control_MultiRunDyn  ! 
!     SUBR    Fault_C1Dyn   ! 
!     SUBR    3PHVSRC       ! 3-Phase Source model

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      INTEGER  Fault_C1, Fault_C2, Fault_C3
      INTEGER  C1_In, C1_Out, Vl_C2, Vl_C1
      INTEGER  Fault_C4
      REAL     Tfalla, TC1_In, TC1_Out, TC2_In
      REAL     TC2_Out, TC3_In, TC3_Out, TC4_In
      REAL     TC4_Out, TC1_In_Relig
      REAL     TC2_In_Relig, TC3_In_Relig
      REAL     TC4_In_Relig, Ve_C1, Vr_C1, Ar_C1
      REAL     Ae_C1, R1r_C1, L1r_C1, L0r_C1
      REAL     R0r_C1, R0e_C1, L0e_C1, L1e_C1
      REAL     R1e_C1, Vf_C1(3), If_C1(3)
      REAL     Ii_C1(3), Vo_C1(3), Io_C1(3)
      REAL     Vi_C1(3), IfRMS_C1, C1_In_TRT(3)
      REAL     C1_Out_Ia, C1_Out_Ib, C1_Out_Ic
      REAL     C1_Out_TRT(3), Ea(3)

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 8
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 56
      IPGB      = NPGB
      NPGB      = NPGB + 19
      INODE     = NNODE + 2
      NNODE     = NNODE + 32
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 12
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      Tfalla   = STOF(ISTOF + 1)
      TC1_In   = STOF(ISTOF + 2)
      TC1_Out  = STOF(ISTOF + 3)
      TC2_In   = STOF(ISTOF + 4)
      TC2_Out  = STOF(ISTOF + 5)
      TC3_In   = STOF(ISTOF + 6)
      TC3_Out  = STOF(ISTOF + 7)
      TC4_In   = STOF(ISTOF + 8)
      TC4_Out  = STOF(ISTOF + 9)
      TC1_In_Relig = STOF(ISTOF + 10)
      TC2_In_Relig = STOF(ISTOF + 11)
      TC3_In_Relig = STOF(ISTOF + 12)
      TC4_In_Relig = STOF(ISTOF + 13)
      Fault_C1 = STOI(ISTOI + 1)
      Fault_C2 = STOI(ISTOI + 2)
      Fault_C3 = STOI(ISTOI + 3)
      C1_In    = STOI(ISTOI + 4)
      C1_Out   = STOI(ISTOI + 5)
      Ve_C1    = STOF(ISTOF + 14)
      Vr_C1    = STOF(ISTOF + 15)
      Ar_C1    = STOF(ISTOF + 16)
      Ae_C1    = STOF(ISTOF + 17)
      R1r_C1   = STOF(ISTOF + 18)
      L1r_C1   = STOF(ISTOF + 19)
      L0r_C1   = STOF(ISTOF + 20)
      R0r_C1   = STOF(ISTOF + 21)
      R0e_C1   = STOF(ISTOF + 22)
      L0e_C1   = STOF(ISTOF + 23)
      L1e_C1   = STOF(ISTOF + 24)
      R1e_C1   = STOF(ISTOF + 25)
      Vl_C2    = STOI(ISTOI + 6)
      Vl_C1    = STOI(ISTOI + 7)
      Fault_C4 = STOI(ISTOI + 8)
      IfRMS_C1 = STOF(ISTOF + 44)
      C1_Out_Ia = STOF(ISTOF + 48)
      C1_Out_Ib = STOF(ISTOF + 49)
      C1_Out_Ic = STOF(ISTOF + 50)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Vf_C1(IT_0) = STOF(ISTOF + 25 + IT_0)
         If_C1(IT_0) = STOF(ISTOF + 28 + IT_0)
         Ii_C1(IT_0) = STOF(ISTOF + 31 + IT_0)
         Vo_C1(IT_0) = STOF(ISTOF + 34 + IT_0)
         Io_C1(IT_0) = STOF(ISTOF + 37 + IT_0)
         Vi_C1(IT_0) = STOF(ISTOF + 40 + IT_0)
         C1_In_TRT(IT_0) = STOF(ISTOF + 44 + IT_0)
         C1_Out_TRT(IT_0) = STOF(ISTOF + 50 + IT_0)
         Ea(IT_0) = STOF(ISTOF + 53 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 20:[const] Real Constant 

      Ve_C1 = 535.0

! 30:[const] Real Constant 

      Ae_C1 = -165.31

! 40:[const] Real Constant 

      Vr_C1 = 493.35

! 50:[const] Real Constant 

      Ar_C1 = -8.0346

! 60:[const] Real Constant 

      R0e_C1 = 14.237

! 70:[const] Real Constant 

      L0e_C1 = 0.18882

! 80:[const] Real Constant 

      R0r_C1 = 28.475

! 90:[const] Real Constant 

      L0r_C1 = 0.37765

! 100:[const] Real Constant 

      R1e_C1 = 2.3729

! 110:[consti] Integer Constant 

      Fault_C1 = 0

! 120:[const] Real Constant 

      L1e_C1 = 0.037765

! 130:[const] Real Constant 

      R1r_C1 = 4.7458

! 140:[const] Real Constant 

      L1r_C1 = 0.07553

! 150:[consti] Integer Constant 

      Fault_C2 = 0

! 160:[consti] Integer Constant 

      Fault_C3 = 0

! 170:[consti] Integer Constant 

      Fault_C4 = 0

! 180:[consti] Integer Constant 

      Vl_C1 = 500

! 190:[consti] Integer Constant 

      Vl_C2 = 1000

! 200:[Medida]  
      CALL MedidaDyn(Ii_C1, Vi_C1)


! 210:[Medida]  
      CALL MedidaDyn(Io_C1, Vo_C1)


! 220:[Control_MultiRun]  
      CALL Control_MultiRunDyn(Vi_C1, Vf_C1, Vo_C1, Tfalla, TC1_In, TC1_&
     &Out, TC2_In, TC2_Out, TC3_In, TC3_Out, TC4_In, TC4_Out, TC1_In_Rel&
     &ig, TC2_In_Relig, TC3_In_Relig, TC4_In_Relig, REAL(Fault_C1), REAL&
     &(Fault_C2), REAL(Fault_C3), REAL(Fault_C4))


! 230:[Fault_C1]  
      CALL Fault_C1Dyn(REAL(Fault_C1), Tfalla, If_C1, IfRMS_C1, Vf_C1)


! 240:[pgb] Output Channel 'IfRMS_C1'

      PGB(IPGB+1) = IfRMS_C1

! 250:[pgb] Output Channel 'Vo_C1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+2+IVD1_1-1) = Vo_C1(IVD1_1)
      ENDDO

! 260:[pgb] Output Channel 'Io_C1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+5+IVD1_1-1) = Io_C1(IVD1_1)
      ENDDO

! 270:[pgb] Output Channel 'Vf_C1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+8+IVD1_1-1) = Vf_C1(IVD1_1)
      ENDDO

! 280:[pgb] Output Channel 'If_C1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+11+IVD1_1-1) = If_C1(IVD1_1)
      ENDDO

! 290:[pgb] Output Channel 'Vi_C1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+14+IVD1_1-1) = Vi_C1(IVD1_1)
      ENDDO

! 300:[pgb] Output Channel 'Ii_C1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+17+IVD1_1-1) = Ii_C1(IVD1_1)
      ENDDO

! 310:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         C1_Out = 0
      ELSE
         C1_Out = 0
         IF ( TIME .GE. TC1_Out ) C1_Out = (1-0)
      ENDIF

! 320:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         C1_In = 0
      ELSE
         C1_In = 0
         IF ( TIME .GE. TC1_In ) C1_In = (1-0)
         IF ( TIME .GE. TC1_In_Relig ) C1_In = 0
      ENDIF

! 330:[source_3] Three Phase Voltage Source Model 2 'Vc'
! Three Phase Source: Vc  Type: Ideal
!  
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = RTCF(NRTCF+1)
      RVD1_3  = Ar_C1*PI_BY180
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS, (IBRCH+7), (IBRCH+8), (IBRCH+9), RVD1_4, .T&
     &RUE., RVD1_1 , RVD1_2, RVD1_3)
!

! 350:[breaker3] 3 Phase Breaker 'C1_Out'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS, (IBRCH+10),0.005,1000000.0,RTCF(NRTCF),0,N&
     &INT(1.0-REAL(C1_Out)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+11),0.005,1000000.0,RTCF(NRTCF),0,N&
     &INT(1.0-REAL(C1_Out)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+12),0.005,1000000.0,RTCF(NRTCF),0,N&
     &INT(1.0-REAL(C1_Out)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH+10),SS))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH+11),SS))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH+12),SS))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1777238099,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1777238099,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1777238099,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH+10),SS))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH+11),SS))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH+12),SS))

! 360:[breaker3] 3 Phase Breaker 'C1_In'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS, (IBRCH+4),0.005,1000000.0,RTCF(NRTCF),0,NI&
     &NT(1.0-REAL(C1_In)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+5),0.005,1000000.0,RTCF(NRTCF),0,NI&
     &NT(1.0-REAL(C1_In)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+6),0.005,1000000.0,RTCF(NRTCF),0,NI&
     &NT(1.0-REAL(C1_In)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH+4),SS))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH+5),SS))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH+6),SS))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,573506414,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,573506414,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,573506414,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH+4),SS))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH+5),SS))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH+6),SS))

! 380:[source_3] Three Phase Voltage Source Model 2 'Vg'
! Three Phase Source: Vg  Type: Ideal
!  
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = RTCF(NRTCF+1)
      RVD1_3  = Ae_C1*PI_BY180
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS, (IBRCH+1), (IBRCH+2), (IBRCH+3), RVD1_4, .T&
     &RUE., RVD1_1 , RVD1_2, RVD1_3)
!

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 1) = Tfalla
      STOF(ISTOF + 2) = TC1_In
      STOF(ISTOF + 3) = TC1_Out
      STOF(ISTOF + 4) = TC2_In
      STOF(ISTOF + 5) = TC2_Out
      STOF(ISTOF + 6) = TC3_In
      STOF(ISTOF + 7) = TC3_Out
      STOF(ISTOF + 8) = TC4_In
      STOF(ISTOF + 9) = TC4_Out
      STOF(ISTOF + 10) = TC1_In_Relig
      STOF(ISTOF + 11) = TC2_In_Relig
      STOF(ISTOF + 12) = TC3_In_Relig
      STOF(ISTOF + 13) = TC4_In_Relig
      STOI(ISTOI + 1) = Fault_C1
      STOI(ISTOI + 2) = Fault_C2
      STOI(ISTOI + 3) = Fault_C3
      STOI(ISTOI + 4) = C1_In
      STOI(ISTOI + 5) = C1_Out
      STOF(ISTOF + 14) = Ve_C1
      STOF(ISTOF + 15) = Vr_C1
      STOF(ISTOF + 16) = Ar_C1
      STOF(ISTOF + 17) = Ae_C1
      STOF(ISTOF + 18) = R1r_C1
      STOF(ISTOF + 19) = L1r_C1
      STOF(ISTOF + 20) = L0r_C1
      STOF(ISTOF + 21) = R0r_C1
      STOF(ISTOF + 22) = R0e_C1
      STOF(ISTOF + 23) = L0e_C1
      STOF(ISTOF + 24) = L1e_C1
      STOF(ISTOF + 25) = R1e_C1
      STOI(ISTOI + 6) = Vl_C2
      STOI(ISTOI + 7) = Vl_C1
      STOI(ISTOI + 8) = Fault_C4
      STOF(ISTOF + 44) = IfRMS_C1
      STOF(ISTOF + 48) = C1_Out_Ia
      STOF(ISTOF + 49) = C1_Out_Ib
      STOF(ISTOF + 50) = C1_Out_Ic

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 25 + IT_0) = Vf_C1(IT_0)
         STOF(ISTOF + 28 + IT_0) = If_C1(IT_0)
         STOF(ISTOF + 31 + IT_0) = Ii_C1(IT_0)
         STOF(ISTOF + 34 + IT_0) = Vo_C1(IT_0)
         STOF(ISTOF + 37 + IT_0) = Io_C1(IT_0)
         STOF(ISTOF + 40 + IT_0) = Vi_C1(IT_0)
         STOF(ISTOF + 44 + IT_0) = C1_In_TRT(IT_0)
         STOF(ISTOF + 50 + IT_0) = C1_Out_TRT(IT_0)
         STOF(ISTOF + 53 + IT_0) = Ea(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
!     SUBR    MedidaOut     ! 
!     SUBR    Control_MultiRunOut  ! 
!     SUBR    Fault_C1Out   ! 
      REAL    VBRANCH       ! 

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indices
      INTEGER  NT_21(3)

! Control Signals
      INTEGER  Fault_C1, Fault_C2, Fault_C3
      INTEGER  Vl_C2, Vl_C1, Fault_C4
      REAL     Ve_C1, Vr_C1, Ar_C1, Ae_C1, R1r_C1
      REAL     L1r_C1, L0r_C1, R0r_C1, R0e_C1
      REAL     L0e_C1, L1e_C1, R1e_C1
      REAL     C1_In_TRT(3), C1_Out_Ia, C1_Out_Ib
      REAL     C1_Out_Ic, C1_Out_TRT(3), Ea(3)

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NPGB      = NPGB + 19
      INODE     = NNODE + 2
      NNODE     = NNODE + 32
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 12
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      Fault_C1 = STOI(ISTOI + 1)
      Fault_C2 = STOI(ISTOI + 2)
      Fault_C3 = STOI(ISTOI + 3)
      Ve_C1    = STOF(ISTOF + 14)
      Vr_C1    = STOF(ISTOF + 15)
      Ar_C1    = STOF(ISTOF + 16)
      Ae_C1    = STOF(ISTOF + 17)
      R1r_C1   = STOF(ISTOF + 18)
      L1r_C1   = STOF(ISTOF + 19)
      L0r_C1   = STOF(ISTOF + 20)
      R0r_C1   = STOF(ISTOF + 21)
      R0e_C1   = STOF(ISTOF + 22)
      L0e_C1   = STOF(ISTOF + 23)
      L1e_C1   = STOF(ISTOF + 24)
      R1e_C1   = STOF(ISTOF + 25)
      Vl_C2    = STOI(ISTOI + 6)
      Vl_C1    = STOI(ISTOI + 7)
      Fault_C4 = STOI(ISTOI + 8)
      C1_Out_Ia = STOF(ISTOF + 48)
      C1_Out_Ib = STOF(ISTOF + 49)
      C1_Out_Ic = STOF(ISTOF + 50)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         C1_In_TRT(IT_0) = STOF(ISTOF + 44 + IT_0)
         C1_Out_TRT(IT_0) = STOF(ISTOF + 50 + IT_0)
         Ea(IT_0) = STOF(ISTOF + 53 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_21(IT_0) = NODE(INODE + 24 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[voltmetergnd] Voltmeter (Line - Ground) 'Ea'
      Ea(1) = EMTDC_VVDC(SS, NT_21(1), 0)
      Ea(2) = EMTDC_VVDC(SS, NT_21(2), 0)
      Ea(3) = EMTDC_VVDC(SS, NT_21(3), 0)

! 20:[const] Real Constant 

      Ve_C1 = 535.0

! 30:[const] Real Constant 

      Ae_C1 = -165.31

! 40:[const] Real Constant 

      Vr_C1 = 493.35

! 50:[const] Real Constant 

      Ar_C1 = -8.0346

! 60:[const] Real Constant 

      R0e_C1 = 14.237

! 70:[const] Real Constant 

      L0e_C1 = 0.18882

! 80:[const] Real Constant 

      R0r_C1 = 28.475

! 90:[const] Real Constant 

      L0r_C1 = 0.37765

! 100:[const] Real Constant 

      R1e_C1 = 2.3729

! 110:[consti] Integer Constant 

      Fault_C1 = 0

! 120:[const] Real Constant 

      L1e_C1 = 0.037765

! 130:[const] Real Constant 

      R1r_C1 = 4.7458

! 140:[const] Real Constant 

      L1r_C1 = 0.07553

! 150:[consti] Integer Constant 

      Fault_C2 = 0

! 160:[consti] Integer Constant 

      Fault_C3 = 0

! 170:[consti] Integer Constant 

      Fault_C4 = 0

! 180:[consti] Integer Constant 

      Vl_C1 = 500

! 190:[consti] Integer Constant 

      Vl_C2 = 1000

! 200:[Medida]  
      CALL MedidaOut()


! 210:[Medida]  
      CALL MedidaOut()


! 220:[Control_MultiRun]  
      CALL Control_MultiRunOut()


! 230:[Fault_C1]  
      CALL Fault_C1Out()


! 350:[breaker3] 3 Phase Breaker 'C1_Out'
! Three Phase Breaker Currents
      C1_Out_Ia = ( CBR((IBRCH+10), SS))
      C1_Out_Ib = ( CBR((IBRCH+11), SS))
      C1_Out_Ic = ( CBR((IBRCH+12), SS))
      C1_Out_TRT(1) = VBRANCH(SS, (IBRCH+10))
      C1_Out_TRT(2) = VBRANCH(SS, (IBRCH+11))
      C1_Out_TRT(3) = VBRANCH(SS, (IBRCH+12))
      CALL BRK_POWER(SS, (IBRCH+10), (IBRCH+11), (IBRCH+12),0,0,0,IVD1_1&
     &,0.02,RVD1_1,RVD1_2)
      IF (UPDATE_AG) THEN
        CALL PSCAD_AGRG2(ICALL_NO,1777238099,RVD1_1,"P")
        CALL PSCAD_AGRG2(ICALL_NO,1777238099,RVD1_2,"Q")
      ENDIF

! 360:[breaker3] 3 Phase Breaker 'C1_In'
! Three Phase Breaker Currents
      C1_In_TRT(1) = VBRANCH(SS, (IBRCH+4))
      C1_In_TRT(2) = VBRANCH(SS, (IBRCH+5))
      C1_In_TRT(3) = VBRANCH(SS, (IBRCH+6))
      CALL BRK_POWER(SS, (IBRCH+4), (IBRCH+5), (IBRCH+6),0,0,0,IVD1_1,0.&
     &02,RVD1_1,RVD1_2)
      IF (UPDATE_AG) THEN
        CALL PSCAD_AGRG2(ICALL_NO,573506414,RVD1_1,"P")
        CALL PSCAD_AGRG2(ICALL_NO,573506414,RVD1_2,"Q")
      ENDIF

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOI(ISTOI + 1) = Fault_C1
      STOI(ISTOI + 2) = Fault_C2
      STOI(ISTOI + 3) = Fault_C3
      STOF(ISTOF + 14) = Ve_C1
      STOF(ISTOF + 15) = Vr_C1
      STOF(ISTOF + 16) = Ar_C1
      STOF(ISTOF + 17) = Ae_C1
      STOF(ISTOF + 18) = R1r_C1
      STOF(ISTOF + 19) = L1r_C1
      STOF(ISTOF + 20) = L0r_C1
      STOF(ISTOF + 21) = R0r_C1
      STOF(ISTOF + 22) = R0e_C1
      STOF(ISTOF + 23) = L0e_C1
      STOF(ISTOF + 24) = L1e_C1
      STOF(ISTOF + 25) = R1e_C1
      STOI(ISTOI + 6) = Vl_C2
      STOI(ISTOI + 7) = Vl_C1
      STOI(ISTOI + 8) = Fault_C4
      STOF(ISTOF + 48) = C1_Out_Ia
      STOF(ISTOF + 49) = C1_Out_Ib
      STOF(ISTOF + 50) = C1_Out_Ic

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 44 + IT_0) = C1_In_TRT(IT_0)
         STOF(ISTOF + 50 + IT_0) = C1_Out_TRT(IT_0)
         STOF(ISTOF + 53 + IT_0) = Ea(IT_0)
      END DO


!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

!     SUBR    MedidaDyn_Begin  ! 
!     SUBR    Control_MultiRunDyn_Begin  ! 
!     SUBR    Fault_C1Dyn_Begin  ! 

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      INTEGER  Fault_C1, Fault_C2, Fault_C3
      INTEGER  Vl_C2, Vl_C1, Fault_C4
      REAL     Ve_C1, Vr_C1, Ar_C1, Ae_C1, R1r_C1
      REAL     L1r_C1, L0r_C1, R0r_C1, R0e_C1
      REAL     L0e_C1, L1e_C1, R1e_C1

! Internal Variables
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 32
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 12
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 20:[const] Real Constant 
      Ve_C1 = 535.0

! 30:[const] Real Constant 
      Ae_C1 = -165.31

! 40:[const] Real Constant 
      Vr_C1 = 493.35

! 50:[const] Real Constant 
      Ar_C1 = -8.0346

! 60:[const] Real Constant 
      R0e_C1 = 14.237

! 70:[const] Real Constant 
      L0e_C1 = 0.18882

! 80:[const] Real Constant 
      R0r_C1 = 28.475

! 90:[const] Real Constant 
      L0r_C1 = 0.37765

! 100:[const] Real Constant 
      R1e_C1 = 2.3729

! 110:[consti] Integer Constant 
      Fault_C1 = 0

! 120:[const] Real Constant 
      L1e_C1 = 0.037765

! 130:[const] Real Constant 
      R1r_C1 = 4.7458

! 140:[const] Real Constant 
      L1r_C1 = 0.07553

! 150:[consti] Integer Constant 
      Fault_C2 = 0

! 160:[consti] Integer Constant 
      Fault_C3 = 0

! 170:[consti] Integer Constant 
      Fault_C4 = 0

! 180:[consti] Integer Constant 
      Vl_C1 = 500

! 190:[consti] Integer Constant 
      Vl_C2 = 1000

! 200:[Medida]  
      CALL MedidaDyn_Begin()


! 210:[Medida]  
      CALL MedidaDyn_Begin()


! 220:[Control_MultiRun]  
      CALL Control_MultiRunDyn_Begin()


! 230:[Fault_C1]  
      CALL Fault_C1Dyn_Begin()


! 240:[pgb] Output Channel 'IfRMS_C1'

! 250:[pgb] Output Channel 'Vo_C1'

! 260:[pgb] Output Channel 'Io_C1'

! 270:[pgb] Output Channel 'Vf_C1'

! 280:[pgb] Output Channel 'If_C1'

! 290:[pgb] Output Channel 'Vi_C1'

! 300:[pgb] Output Channel 'Ii_C1'

! 330:[source_3] Three Phase Voltage Source Model 2 'Vc'
      RTCF(NRTCF)   = Vr_C1*SQRT_2*SQRT_1BY3
      RTCF(NRTCF+1) = 60.0*TWO_PI
      RTCF(NRTCF+3) = 0.05
      NRTCF = NRTCF + 4

! 340:[coupled_3lines] mutually coupled 3 wires 
      RVD1_1 = ONE_3RD*(2.0*R1r_C1 + R0r_C1)
      RVD1_2 = ONE_3RD*(2.0*L1r_C1 + L0r_C1)
      RVD1_3 = ONE_3RD*(R0r_C1 - R1r_C1)
      RVD1_4 = ONE_3RD*(L0r_C1 - L1r_C1)
      TFDATA(1,1) = RVD1_1
      TFDATA(2,1) = RVD1_2
      TFDATA(1,2) = RVD1_3
      TFDATA(2,2) = RVD1_4
      TFDATA(3,2) = RVD1_1
      TFDATA(4,2) = RVD1_2
      TFDATA(1,3) = RVD1_3
      TFDATA(2,3) = RVD1_4
      TFDATA(3,3) = RVD1_3
      TFDATA(4,3) = RVD1_4
      TFDATA(5,3) = RVD1_1
      TFDATA(6,3) = RVD1_2
      CALL EMTDC_SETTFPARM((IXFMR + 1),2)

! 350:[breaker3] 3 Phase Breaker 'C1_Out'
      CALL COMPONENT_ID(ICALL_NO,1777238099)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 360:[breaker3] 3 Phase Breaker 'C1_In'
      CALL COMPONENT_ID(ICALL_NO,573506414)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 370:[coupled_3lines] mutually coupled 3 wires 
      RVD1_1 = ONE_3RD*(2.0*R1e_C1 + R0e_C1)
      RVD1_2 = ONE_3RD*(2.0*L1e_C1 + L0e_C1)
      RVD1_3 = ONE_3RD*(R0e_C1 - R1e_C1)
      RVD1_4 = ONE_3RD*(L0e_C1 - L1e_C1)
      TFDATA(1,1) = RVD1_1
      TFDATA(2,1) = RVD1_2
      TFDATA(1,2) = RVD1_3
      TFDATA(2,2) = RVD1_4
      TFDATA(3,2) = RVD1_1
      TFDATA(4,2) = RVD1_2
      TFDATA(1,3) = RVD1_3
      TFDATA(2,3) = RVD1_4
      TFDATA(3,3) = RVD1_3
      TFDATA(4,3) = RVD1_4
      TFDATA(5,3) = RVD1_1
      TFDATA(6,3) = RVD1_2
      CALL EMTDC_SETTFPARM((IXFMR + 2),2)

! 380:[source_3] Three Phase Voltage Source Model 2 'Vg'
      RTCF(NRTCF)   = Ve_C1*SQRT_2*SQRT_1BY3
      RTCF(NRTCF+1) = 60.0*TWO_PI
      RTCF(NRTCF+3) = 0.05
      NRTCF = NRTCF + 4

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

!     SUBR    MedidaOut_Begin  ! 
!     SUBR    Control_MultiRunOut_Begin  ! 
!     SUBR    Fault_C1Out_Begin  ! 

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_21(3)

! Control Signals
      INTEGER  Fault_C1, Fault_C2, Fault_C3
      INTEGER  Vl_C2, Vl_C1, Fault_C4
      REAL     Ve_C1, Vr_C1, Ar_C1, Ae_C1, R1r_C1
      REAL     L1r_C1, L0r_C1, R0r_C1, R0e_C1
      REAL     L0e_C1, L1e_C1, R1e_C1

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 32
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 12
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_21(IT_0) = NODE(INODE + 24 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 20:[const] Real Constant 
      Ve_C1 = 535.0

! 30:[const] Real Constant 
      Ae_C1 = -165.31

! 40:[const] Real Constant 
      Vr_C1 = 493.35

! 50:[const] Real Constant 
      Ar_C1 = -8.0346

! 60:[const] Real Constant 
      R0e_C1 = 14.237

! 70:[const] Real Constant 
      L0e_C1 = 0.18882

! 80:[const] Real Constant 
      R0r_C1 = 28.475

! 90:[const] Real Constant 
      L0r_C1 = 0.37765

! 100:[const] Real Constant 
      R1e_C1 = 2.3729

! 110:[consti] Integer Constant 
      Fault_C1 = 0

! 120:[const] Real Constant 
      L1e_C1 = 0.037765

! 130:[const] Real Constant 
      R1r_C1 = 4.7458

! 140:[const] Real Constant 
      L1r_C1 = 0.07553

! 150:[consti] Integer Constant 
      Fault_C2 = 0

! 160:[consti] Integer Constant 
      Fault_C3 = 0

! 170:[consti] Integer Constant 
      Fault_C4 = 0

! 180:[consti] Integer Constant 
      Vl_C1 = 500

! 190:[consti] Integer Constant 
      Vl_C2 = 1000

! 200:[Medida]  
      CALL MedidaOut_Begin()


! 210:[Medida]  
      CALL MedidaOut_Begin()


! 220:[Control_MultiRun]  
      CALL Control_MultiRunOut_Begin()


! 230:[Fault_C1]  
      CALL Fault_C1Out_Begin()


      RETURN
      END

