!=======================================================================
! Generated by  : PSCAD v4.6.2.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

!     SUBR    3PHVSRC       ! 3-Phase Source model

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1, BRK2, BRK1
      REAL     activePower, reactivePower
      REAL     vLoad(3), iLoad(3), Vf(3)

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS, INODE, IBRCH                    ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 3
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 11
      IPGB      = NPGB
      NPGB      = NPGB + 11
      INODE     = NNODE + 2
      NNODE     = NNODE + 20
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 21
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      IT_1     = STOI(ISTOI + 1)
      activePower = STOF(ISTOF + 1)
      reactivePower = STOF(ISTOF + 2)
      BRK2     = STOI(ISTOI + 2)
      BRK1     = STOI(ISTOI + 3)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         vLoad(IT_0) = STOF(ISTOF + 2 + IT_0)
         iLoad(IT_0) = STOF(ISTOF + 5 + IT_0)
         Vf(IT_0) = STOF(ISTOF + 8 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 40:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_1 = 0
      IF ( TIME .GE. 0.098 ) IT_1 = 1
      IF ( TIME .GE. (0.098+1.5) ) IT_1 = 0

! 60:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK1 = 0
      ELSE
         BRK1 = 0
         IF ( TIME .GE. 100.0 ) BRK1 = (1-0)
      ENDIF

! 70:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK2 = 0
      ELSE
         BRK2 = 0
         IF ( TIME .GE. 100.0 ) BRK2 = (1-0)
      ENDIF

! 80:[breaker3] 3 Phase Breaker 'BRK2'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS, (IBRCH+10),0.005,1000000.0,RTCF(NRTCF),0,N&
     &INT(1.0-REAL(BRK2)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+11),0.005,1000000.0,RTCF(NRTCF),0,N&
     &INT(1.0-REAL(BRK2)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+12),0.005,1000000.0,RTCF(NRTCF),0,N&
     &INT(1.0-REAL(BRK2)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH+10),SS))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH+11),SS))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH+12),SS))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2082709826,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2082709826,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2082709826,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH+10),SS))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH+11),SS))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH+12),SS))

! 90:[pgb] Output Channel 'reactivePower'

      PGB(IPGB+7) = reactivePower

! 100:[pgb] Output Channel 'activePower'

      PGB(IPGB+8) = activePower

! 120:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS, (IBRCH+16), (IBRCH+17), (IBRCH+18), (IBRCH+1&
     &9), (IBRCH+20), (IBRCH+21),0,IT_1,1,0.01)
      LVD1_1 = (OPENBR( (IBRCH+16),SS).AND.OPENBR( (IBRCH+17),SS).AND.OP&
     &ENBR( (IBRCH+18),SS).AND.OPENBR( (IBRCH+19),SS).AND.OPENBR( (IBRCH&
     &+20),SS).AND.OPENBR( (IBRCH+21),SS))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,741403501,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 130:[breaker3] 3 Phase Breaker 'BRK1'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS, (IBRCH+1),0.005,1000000.0,RTCF(NRTCF),0,NI&
     &NT(1.0-REAL(BRK1)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+2),0.005,1000000.0,RTCF(NRTCF),0,NI&
     &NT(1.0-REAL(BRK1)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+3),0.005,1000000.0,RTCF(NRTCF),0,NI&
     &NT(1.0-REAL(BRK1)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH+1),SS))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH+2),SS))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH+3),SS))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,192143192,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,192143192,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,192143192,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH+1),SS))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH+2),SS))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH+3),SS))

! 1:[source_3] Three Phase Voltage Source Model 2 'sending'
! Three Phase Source: sending  Type: R
!  
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = RTCF(NRTCF+1)
      RVD1_3  = 120.0*PI_BY180
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS, (IBRCH+4), (IBRCH+5), (IBRCH+6), RVD1_4, .T&
     &RUE., RVD1_1 , RVD1_2, RVD1_3)
!

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 1'
! Three Phase Source: Source 1  Type: R
!  
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = RTCF(NRTCF+1)
      RVD1_3  = 0.0*PI_BY180
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS, (IBRCH+7), (IBRCH+8), (IBRCH+9), RVD1_4, .T&
     &RUE., RVD1_1 , RVD1_2, RVD1_3)
!

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOI(ISTOI + 1) = IT_1
      STOF(ISTOF + 1) = activePower
      STOF(ISTOF + 2) = reactivePower
      STOI(ISTOI + 2) = BRK2
      STOI(ISTOI + 3) = BRK1

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 2 + IT_0) = vLoad(IT_0)
         STOF(ISTOF + 5 + IT_0) = iLoad(IT_0)
         STOF(ISTOF + 8 + IT_0) = Vf(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
      REAL    VBRANCH       ! 

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indices
      INTEGER  NT_5(3), NT_6(3)

! Control Signals
      REAL     activePower, reactivePower
      REAL     vLoad(3), iLoad(3), Vf(3)

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS, INODE, IBRCH                    ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 11
      INODE     = NNODE + 2
      NNODE     = NNODE + 20
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 21
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      activePower = STOF(ISTOF + 1)
      reactivePower = STOF(ISTOF + 2)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         vLoad(IT_0) = STOF(ISTOF + 2 + IT_0)
         iLoad(IT_0) = STOF(ISTOF + 5 + IT_0)
         Vf(IT_0) = STOF(ISTOF + 8 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_5(IT_0) = NODE(INODE + 12 + IT_0)
         NT_6(IT_0) = NODE(INODE + 15 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[voltmetergnd] Voltmeter (Line - Ground) 'Vf'
      Vf(1) = EMTDC_VVDC(SS, NT_6(1), 0)
      Vf(2) = EMTDC_VVDC(SS, NT_6(2), 0)
      Vf(3) = EMTDC_VVDC(SS, NT_6(3), 0)

! 20:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      iLoad(1) = ( CBR((IBRCH+13), SS))
      iLoad(2) = ( CBR((IBRCH+14), SS))
      iLoad(3) = ( CBR((IBRCH+15), SS))
      vLoad(1) = EMTDC_VVDC(SS, NT_5(1), 0)
      vLoad(2) = EMTDC_VVDC(SS, NT_5(2), 0)
      vLoad(3) = EMTDC_VVDC(SS, NT_5(3), 0)

! 30:[pgb] Output Channel 'iLoad'

      DO IVD1_1 = 1, 3
         PGB(IPGB+1+IVD1_1-1) = iLoad(IVD1_1)
      ENDDO

! 50:[pgb] Output Channel 'Vf'

      DO IVD1_1 = 1, 3
         PGB(IPGB+4+IVD1_1-1) = Vf(IVD1_1)
      ENDDO

! 80:[breaker3] 3 Phase Breaker 'BRK2'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS, (IBRCH+10), (IBRCH+11), (IBRCH+12),0,0,0,IVD1_1&
     &,0.02,RVD1_1,RVD1_2)
      activePower = RVD1_1
      reactivePower = RVD1_2

! 110:[pgb] Output Channel 'vLoad'

      DO IVD1_1 = 1, 3
         PGB(IPGB+9+IVD1_1-1) = vLoad(IVD1_1)
      ENDDO

! 120:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 130:[breaker3] 3 Phase Breaker 'BRK1'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS, (IBRCH+1), (IBRCH+2), (IBRCH+3),0,0,0,IVD1_1,0.&
     &02,RVD1_1,RVD1_2)

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 1) = activePower
      STOF(ISTOF + 2) = reactivePower

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 2 + IT_0) = vLoad(IT_0)
         STOF(ISTOF + 5 + IT_0) = iLoad(IT_0)
         STOF(ISTOF + 8 + IT_0) = Vf(IT_0)
      END DO


!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH                    ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 20
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 21
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 80:[breaker3] 3 Phase Breaker 'BRK2'
      CALL COMPONENT_ID(ICALL_NO,2082709826)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 90:[pgb] Output Channel 'reactivePower'

! 100:[pgb] Output Channel 'activePower'

! 120:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 130:[breaker3] 3 Phase Breaker 'BRK1'
      CALL COMPONENT_ID(ICALL_NO,192143192)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 1:[source_3] Three Phase Voltage Source Model 2 'sending'
      CALL E_BRANCH_CFG( (IBRCH+4),SS,1,0,0,1.0,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+5),SS,1,0,0,1.0,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+6),SS,1,0,0,1.0,0.0,0.0)
      RTCF(NRTCF)   = 230.0*SQRT_2*SQRT_1BY3
      RTCF(NRTCF+1) = 60.0*TWO_PI
      RTCF(NRTCF+3) = 0.05
      NRTCF = NRTCF + 4

! 1:[source_3] Three Phase Voltage Source Model 2 'Source 1'
      CALL E_BRANCH_CFG( (IBRCH+7),SS,1,0,0,1.0,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+8),SS,1,0,0,1.0,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+9),SS,1,0,0,1.0,0.0,0.0)
      RTCF(NRTCF)   = 230.0*SQRT_2*SQRT_1BY3
      RTCF(NRTCF+1) = 60.0*TWO_PI
      RTCF(NRTCF+3) = 0.05
      NRTCF = NRTCF + 4

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_5(3), NT_6(3)

! Control Signals

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH                    ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 20
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 21
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_5(IT_0) = NODE(INODE + 12 + IT_0)
         NT_6(IT_0) = NODE(INODE + 15 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 20:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 30:[pgb] Output Channel 'iLoad'

! 50:[pgb] Output Channel 'Vf'

! 110:[pgb] Output Channel 'vLoad'

      RETURN
      END

